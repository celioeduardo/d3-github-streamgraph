{"version":3,"file":"bundle.js","sources":["../src/transformData.js","../src/index.js"],"sourcesContent":["import {\n  timeParse,\n  utcWeek,\n  utcWeeks,\n  group,\n  stack,\n  extent,\n  stackOffsetWiggle,\n  stackOrderAppearance,\n} from 'd3';\nimport { blur } from 'array-blur';\n\nconst blurRadius = 15;\n\nconst parseDate = timeParse('%Y-%m-%d');\n\nconst layer = d => d.repo;\n\nexport const transformData = (data) => {\n  //data = data.filter(d => d.repo !== 'd3');\n  data.forEach((d) => {\n    d.date = utcWeek.floor(parseDate(d.date.split(' ')[0]));\n  });\n\n  // Aggregate by week and repository.\n  const groupedData = group(\n    data,\n    (d) => d.date,\n    layer\n  );\n  \n\n  const layerGroupedData = group(data, layer);\n\n  const layers = Array.from(layerGroupedData.keys());\n\n  const [start, stop] = extent(data, (d) => d.date);\n  const allWeeks = utcWeeks(start, stop);\n\n  const dataBylayer = new Map();\n\n  for (let layer of layers) {\n    const layerData = allWeeks.map((date) => {\n      const value = groupedData.get(date);\n      const commits = value ? value.get(layer) : null;\n      const commitCount = commits ? commits.length : 0;\n      return commitCount;\n    });\n\n    // Apply smoothing\n    const smoothedLayerData = blur().radius(blurRadius)(layerData);\n\n    dataBylayer.set(layer, smoothedLayerData);\n  }\n\n  const transformedData = [];\n  allWeeks.forEach((date, i) => {\n    const row = { date };\n    for (let layer of layers) {\n      row[layer] = dataBylayer.get(layer)[i];\n    }\n    transformedData.push(row);\n  });\n\n  const stackedData = stack()\n    .offset(stackOffsetWiggle)\n    .order(stackOrderAppearance)\n    .keys(layers)(transformedData);\n\n  return { data, stackedData };\n};\n","import {\n  json,\n  scaleTime,\n  extent,\n  max,\n  min,\n  scaleLinear,\n  area,\n  select,\n  scaleOrdinal,\n  hcl,\n  randomNormal,\n  randomLcg,\n  axisTop,\n  axisBottom,\n  ascending,\n} from 'd3';\nimport { areaLabel } from 'd3-area-label';\nimport { transformData } from './transformData';\n\nconst dataURL =\n  'https://gist.githubusercontent.com/curran/18287ef2c4b64ffba32000aad47c292b/raw/eb2dd48d383f09a70b23dc35c3e8eb7b6c7c31ad/all-d3-commits.json';\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst margin = { top: 20, right: 0, bottom: 20, left: 0 };\nconst ticks = 20;\n\nconst innerWidth = width - margin.left - margin.right;\nconst innerHeight = height - margin.top - margin.bottom;\n\nconst xValue = (d) => d.date;\n\nconst render = ({ data, stackedData }) => {\n  const xScale = scaleTime()\n    .domain(extent(data, xValue))\n    .range([0, innerWidth]);\n\n  const yScale = scaleLinear()\n    .domain([\n      min(stackedData, (d) => min(d, (d) => d[0])),\n      max(stackedData, (d) => max(d, (d) => d[1])),\n    ])\n    .range([innerHeight, 0]);\n\n  const areaGenerator = area()\n    .x((d) => xScale(d.data.date))\n    .y0((d) => yScale(d[0]))\n    .y1((d) => yScale(d[1]));\n\n  const svg = select('body')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height);\n\n  const g = svg\n    .append('g')\n    .attr(\n      'transform',\n      `translate(${margin.left},${margin.top})`\n    );\n\n  const random = randomNormal.source(randomLcg(0.5))(\n    30,\n    10\n  );\n\n  const colorScale = scaleOrdinal().range(\n    stackedData.map((country, i) => {\n      const t = i / stackedData.length;\n      return hcl(t * 360, 50, random());\n    })\n  );\n\n  g.append('g').call(\n    axisTop(xScale)\n      .tickSize(-innerHeight)\n      .tickPadding(6)\n      .ticks(ticks)\n  );\n  g.append('g')\n    .attr('transform', `translate(0, ${innerHeight})`)\n    .call(\n      axisBottom(xScale)\n        .tickSize(0)\n        .tickPadding(5)\n        .ticks(ticks)\n    )\n    .selectAll('line')\n    .remove();\n\n  // Add a black \"envelope\" as a backdrop behind the layers,\n  // so that we don't get undesirable artifacts where the\n  // tick lines are slightly visible in the cracks between layers.\n  stackedData.sort((a, b) => ascending(a.index, b.index));\n  const first = stackedData[0];\n  const last = stackedData[stackedData.length - 1];\n  const outlinePadding = 0.5;\n  const envelope = first.map((d, i) =>\n    Object.assign(\n      [d[0] - outlinePadding, last[i][1] + outlinePadding],\n      { data: d.data }\n    )\n  );\n  g.append('path').attr('d', areaGenerator(envelope));\n\n  g.append('g')\n    .selectAll('path')\n    .data(stackedData)\n    .enter()\n    .append('a')\n    .attr(\n      'href',\n      (d) => `https://github.com/stamen/${d.key}`\n    )\n    .attr('target', '_blank')\n    .append('path')\n    .attr('class', 'area')\n    .attr('d', areaGenerator)\n    .attr('fill', (d) => colorScale(d.key))\n    .append('title')\n    .text((d) => d.key);\n\n  const labels = g\n    .append('g')\n    .selectAll('text')\n    .data(stackedData);\n\n  labels\n    .enter()\n    .append('text')\n    .attr('class', 'area-label')\n    .merge(labels)\n    .text((d) => d.key)\n    .attr('transform', areaLabel(areaGenerator));\n};\n\n// Load the data.\njson(dataURL).then((data) => {\n  render(transformData(data));\n});\n"],"names":["parseDate","timeParse","layer","d","repo","width","window","innerWidth","height","innerHeight","margin","xValue","date","then","data","stackedData","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","min","max","areaGenerator","area","x","y0","y1","g","select","append","attr","random","randomNormal","source","randomLcg","colorScale","scaleOrdinal","map","country","i","t","length","hcl","call","axisTop","tickSize","tickPadding","ticks","axisBottom","selectAll","remove","sort","a","b","ascending","index","first","last","envelope","Object","assign","enter","key","text","labels","merge","areaLabel","render","forEach","utcWeek","floor","split","groupedData","group","layerGroupedData","layers","Array","from","keys","start","stop","allWeeks","utcWeeks","dataBylayer","Map","layerData","value","get","commits","smoothedLayerData","blur","radius","set","transformedData","row","push","stack","offset","stackOffsetWiggle","order","stackOrderAppearance","transformData"],"mappings":"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"}